#+TITLE: Tomasulo Algorithm Program Notes
* Reservation Station and Load Store Buffers
* Reorder Buffer
- Store results temporarily
* Instruction Queue
* Stages
** Stage 1 (Issue)
- Issue stage
  - Fetch from memory
  - Send to reservation station
  - Send to reorder buffer
- Will stall if:
  - Reservation station is not available
  - If reorder buffer is full
- Register renaming
- Consider parameter 'Issue Width'
  - Number of instructions that can be issued in a single clock cycle
    - Most of the times, this number is 1
    - There are cases where the width can be greater than 1
- Issue stage happens in-order
  - If stall happens, all subsequent instructions are stalled
** Stage 2 (Execution)
- Instructions moved from reservation station to execution unit
- Execution units include:
  - FP:
    - Adder
    - Multiplier
    - Load
    - Store
    - Divider
  - Integer
    - Adder
    - Load
    - Store
- Execution stage will stall if:
  - The values of the operands of the instruction are not available (RAW)
  - There are no free execution units for the instruction (Structural Hazard on
    Execution Unit)
  - Latency of execution stage depends on the latency of the execution unit used
- Load and store instruction both need to compute the address of the data that
  needs to be read or written
- Load access memory
- Store doesn't access memory during execution stage, accessing memory during
  commit stage
** Stage 3 (Write Result)
- Result sent to:
  - Reservation station -> RAW hazard
  - Reorder buffer (holds temporary result before they are committed to
    registers and memory)
- Pass values back to reservation station
- Pass values back to reorder buffer
** Stage 4 (Commit)
- Result are written to:
  - Register file from ROB
  - Memory from ROB
- Remove from ROB
- Instructions that write to register file:
  - Arithmetic/Logic
  - Load
- Store instructions write to memory
- Branches:
  - Correct prediction: branch is removed from ROB
  - Incorrect prediction: ROB is flushed
* Structures in Program
** Register file
- Integer registers
- FP registers
- Register renaming map
  - Stores mapping between register file and new name
** Data Memory
- Handled
** Reservation Stations
#+BEGIN_SRC c++
typedef struct {
  res_station_t type;   // reservation station type
  unsigned name;        // reservation station name (i.e., "Int", "Add", "Mult",
                        // "Load") for logging purposes
  unsigned pc;          // pc of corresponding instruction (set to UNDEFINED if
                        // reservation station is available)
  unsigned value1;      // Vj field
  unsigned value2;      // Vk field
  unsigned tag1;        // Qj field
  unsigned tag2;        // Qk field
  unsigned destination; // destination field
  unsigned address;     // address field (for loads and stores)
} res_station_entry_t;
#+END_SRC
** Reorder Buffer (ROB)
#+BEGIN_SRC c++
typedef struct {
  bool ready;  // ready field
  unsigned pc; // pc of corresponding instruction (set to UNDEFINED if ROB entry
  // is available)
  stage_t state;        // state field
  unsigned destination; // destination field
  unsigned value;       // value field
  bool empty;
} rob_entry_t;
#+END_SRC
** Instruction Window
- Contains pending instruction
- Shows stage of instruction
* Handout -> Program Map
** Register Table
- Number column is register renaming map
** Top Left Table
- Instruction window
** Reorder buffer
- Reorder buffer
* Looking in the Header File
* Questions
** Reservation Station Questions
- Is there a res station entry for each execution unit?
- Should I let the res station table handle the busy/not busy shit
- How many entries are there in the reservation station structure (is
  dynamically allocated?)
- How are the reservation stations named?
** ROB
* General
- LW: destination = dest, src = src1, immediate = immediate
  - table:
    | name | busy | pc | vj                          | vk | qj | qk | dest      | addr      |
    | res  | y/n  |    | value in register(mem addr) | -  | -  |    | rob entry | immediate |
- SW: source register = src1, dest = src2, immediate = immediate
  sw f0 10(r1)
  src2 = 1
  src1 = 0
  immediate = 10
  - table:
    | name | busy | pc | vj                | vk                          | qj                   | qk | dest      | addr      |
    | res  | y/n  |    | either source reg | value in register(mem addr) | or tag of source reg | -  | rob entry | immediate |
  - In ROB, SW/SWS don't populate the dest field
** Execution Units
*** Integer
- Integer additions
- branches
- subtraction
- logic
*** Floating Point
**** Adder
- FP add, subtract
**** Multiplier
**** Divider
**** Memory
* Flow
** Issue
*** Is there an available ROB entry?
*** Is there an available reservation station entry?
- reservation station availability based on pc field of reservation_station.entries[i]
*** If both are available, decode, add to information to reservation station entry
**** Not load/store instructions
***** No immediate
****** entries[i].type
- populated at load program
****** entries[i].name
- populated at load program
****** set pc
- passed from previous function
****** set destination
- ROB entry #
****** set/get value1 OR tag1(rob entry #)
- check ROB, if register has a name, use tag1, else get value from mem
****** set/get value2 OR tag2(rob entry #)
- check ROB, if register has a name, use tag1, else get value from mem
***** Immediate
- same as above, except value2 is guaranteed
**** Load/store instructions
- Address = immediate until execution stage
***** Load
- src1 at issue?
***** Store
*** Create instruction window entry
*** Add instruction window entry to instruction window
** Execute
*** Load Instruction
- Load instructions load data from memory in the execution stage and send their result to the
reservation stations and ROB through the CDB in the write result stag
* Tasks
** [ ] pointer system for rob entries
** [ ] rob entries for branching and jumping instruction
** [ ] reservation station entries for branching and jumping instructions
