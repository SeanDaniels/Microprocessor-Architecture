#+TITLE: Scratch
* Array setup
-
  - all arrays have 1024 unsigned elements
  - array 'a' stored at mem location 0xA0000
  - array 'b' stored at mem location (0xA0000 + 1024*4) 0xA1000
  - array 'c' stored at mem location (0xA0000 + 1024*8) 0xA2000
* Cache Setup (testcase_vectoradd)
** Configuration
- Write back (doesn't ever write to memory)
- Write allocate (on write miss, take a cache block)
- 16 kb cache
- n = 1 (one tag array)
- block size = 16 B -> each block stores 4 array elements
- number of sets = 1024
** Blocks per Array
- How many cache blocks will each array take to write? *256*
  - Each block contains 4 array elements
  - Each array has 1024 elements
  - number of blocks needed = (number of elements)/(elements per block)
    - For this array/cache config -> 1024/4 = 256
** Arrays
- While iterating through the arrays, when should the index change?
- Is the tag always going to be the same for these arrays?
- Are there more blocks than elements? *yes*
  - Total number of elements = 1024 * 3 = 3072
  - Number of blocks needed for all elements = (total number of elements)/(elements per block)
    - For this array/cache config -> 3072/4 = 768
** Process
- cache read goes to index provided by tag, checks valid bit
- if valid bit is 0, cache miss
- if valid bit is 1, cache hit, eviction should happen
* Tag Output
- Number of tag bits
  - 32 - 14 = 18
- Number of index bits
  - 10
- Number of offset bits
  - 4
** Address 1 (A[0])
- Address
  - Decimal: 655360
  - Hex: 0xa0000
  - Binary: 0000 0000 0000 1010 0000 0000 0000 0000
- Block Offset:
  - Hex: 0
  - Binary: 0000
- Index:
  - Hex: 0x00
  - Binary: 00 0000 0000
  - Decimal: 0
- Tag:
  - Hex: 0x0000000000028
- Address sent from pipeline
  - 4 byte - 655360
  - in hex - a0000
  - In binary:
    - 1010 0000 0000 0000 0000
  - In 32 bit binary
    - 0000 0000 0000 1010 0000 0000 0000 0000
- Next address
  - Decimal: 659456
  - Hex: 0xa1000
  - Binary: 0000 0000 0000 1010 0001 0000 0000 0000
** Address 2 (B[0])
- Address:
  - Decimal: 659456
  - Hex: 0x000a1000
  - Binary: 0000 0000 0000 1010 0001 0000 0000 0000
- Block Offset:
  - Hex: 0
  - Binary: 0000
- Index:
  - Binary: 01 0000 0000
  - Decimal: 256
- Tag:
  - Hex: 0x0000000000028
** Address 3 (C[0])
- Address:
  - Decimal: 659456
  - Hex: 0x000a2000
  - Binary: 0000 0000 0000 1010 0010 0000 0000 0000
- Block Offset:
  - Hex: 0
  - Binary: 0000
- Index:
  - Binary: 10 0000 0000
  - Decimal: 512
- Tag:
  - Hex: 0x0000000000028
* Matrix Multiplication Test Code
- Name matmul.asm
- 2 square matrices (n x n)
- Laid out contiguously in memory, starting at address A
- should be configurable from test case file
** Matrix Multiplication Refresher
- When multiplying matrices (row major)
- Consider the following example:
  -      Matrix 1               Matrix 2
    | A(1,1) | A(1,2) | x | B(1,1) | B(1,2) |
    | A(2,1) | A(2,2) | x | B(2,1) | B(2,2) |
  - Product:
    | A(1,1)*B(1,1)+A(1,2)*B(2,1) | A(1,1)*B(1,2)+A(1,2)*B(2,2) |
    | A(2,1)*B(1,1)+A(2,2)*B(2,1) | A(2,1)*B(1,2)+A(1,2)*B(2,2) |
  - matrix mult in c++
    #+BEGIN_SRC C++
#include <iostream>
using namespace std;
int main(){
    int product[2][2];
    int argOne[2][2];
    int argTwo[2][2];
    unsigned rowMax = 2;
    unsigned colMax = 2;
    for(unsigned i = 0; i< rowMax; ++i){
        for(unsigned j = 0; j < colMax; ++j){
            argOne[i][j] = 2;
            argTwo[i][j] = 2;
            product[i][j] = 0;
        }
    }
    for(unsigned i = 0; i< rowMax; ++i){
        for(unsigned j = 0; j< colMax; ++j){
            for(unsigned k = 0; k < rowMax; ++k){
                printf("Before dot product: Product[%d][%d] = %d\n",i,j,product[i][j]);
                printf("Content of argOne: argOne[%d][%d] = %d\n",i,j,argOne[i][j]);
                printf("Content of argTwo: argTwo[%d][%d] = %d\n",i,j,argTwo[i][j]);
                product[i][j] += argOne[i][k]*argTwo[k][j];
                printf("After dot product: Product[%d][%d] = %d\n",i,j,product[i][j]);
            }
        }
    }
    for(unsigned i = 0; i < rowMax; ++i){
        for(unsigned j = 0; j < colMax; ++j){
            //cout << product[i][j] << endl;
        }
    }
}

    #+END_SRC
  - Matrix add in c++
    #+BEGIN_SRC C++
#include <iostream>
using namespace std;
int main(){
int argOne[2] = {2,2};
int argTwo[2] = {2,2};
int sum[2] = {0,0};
unsigned maxIndex = 2;
for(unsigned i = 0; i < maxIndex; ++i){
    sum[i] = argOne[i]+argTwo[i];
    printf("sum[%d] = %d\n", i, sum[i]);
}
}

    #+END_SRC

    #+RESULTS:
    | sum[0] | = | 4 |
    | sum[1] | = | 4 |
** Assembly register shifting
*** Innermost loop
- c[i][j] += a[i][k] * b[k][j]
- Point to location c[i][j]
- Point to location a[i][0]
- Point to location b[0][j]
  #+BEGIN_SRC asm
;set sytem outer loop counter
LW R7 0(R1)
;set system middle loop counter
LW R8 0(R1)
;set system inner loop counter
LW R9 0(R1)
;set starting pointer for a[0][0]
LW R30 0(R2)
;set starting pointer for b[0][0]
LW R31 0(R3)
;set starting pointer for c[0][0]
LW R32 0(R4)
;clear temp index holder
XOR R5 R5 R5
;clear temp index holder
XOR R6 R6 R6
;clear colOffset reg
XOR R11 R11 R11
;;;;;;;;;;;;;;;;;;;;;;;;;
;; init rowOffset reg  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
;rowOffset needs to be number of columns * 4 (size of element)
;clear R11 reg
XOR R12 R11 R11
;add 4 to R12 reg
ADDI R12 R12 4
;multiply R12 by number of elements per row (number of columns(N))
MULT R12 R12 R7; R7==R8==R9==4
OUTERLOOP:  ADDI R5 R310 0
    ADDI R6 R31 0
;(R8 = numberOfColumns or numberOfRows)
    ADD R8 R8 R1
;(R9 = numberOfColumns or numberOfRows)
MIDDLELOOP: ADDI R9 R9 R1; reset inner loop counter
    XOR R25 R25 R25; clear sum register
INNERLOOP:  LW R40 0(R5)
;c[i][j] += a[i][k]*b[k][j];
;load a[i][k]
;load b[k][j]
    LW R41 0(R6)
;multiply a[i][k]*b[k][j]
    MULT R26 R40 R41
;someReg += a[i][k]*b[k][j]
    ADD R25 R25 R26
;increment a pointer
    ADDI R5 R5 4 ;increment a index by one col
;increment b pointer
    ADD R6 R6 R12 ;increment b index by one row
;decrement innerloop counter
    SUBI R9 R9 1
;(if R9 > 0)
    BNEZ R9 INNERLOOP
;else, store sumregValue (c[i][j])
    SW R25 0(R32)
;decrement middle loop counter
    SUBI R8 R8 1; decrement middleloop counter
;increment c index by one element
    ADD R32 R32 R11
;if(R8 > 0)
    BNEZ R8 MIDDLELOOP
;increment a index
    ADD R30 R30 R12
;increment c index
    ADD R32 R32 R12
;decrment outer loop counter
    SUBI R7 R7 1
;(if R7>0)
    BNEZ R7 OUTERLOOP
   EOP
  #+END_SRC
